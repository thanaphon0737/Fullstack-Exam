services:
  postgres:
    image: postgres
    restart: always
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d order_system"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    command: ["npm", "run", "start:dev"]
    volumes:
      - ./gateway:/usr/src/app
      - /usr/src/app/node_modules
  users-services:
    build:
      context: ./services/users-services
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    command: ["npm", "run", "start:dev"]
    volumes:
      - ./services/users-services:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  orders-services:
    build:
      context: ./services/orders-services
      dockerfile: Dockerfile
    ports:
      - "3002:3000"
    command: ["npm", "run", "start:dev"]
    volumes:
      - ./services/orders-services:/usr/src/app
      - /usr/src/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
  frontend:
    build:
      context: ./frontend/app-frontend
      dockerfile: Dockerfile
    ports:
      - "80:3000"
    env_file:
      - ./frontend/app-frontend/.env.local
    depends_on:
      - gateway
volumes:
  postgres_data: